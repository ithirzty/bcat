cTypes = []cpstring{
    "char", "signed", "unsigned", "short", "int", "long", "float", "double", "void", "bool"
}

cSpecialVals = []cpstring {
    "null"
}

cKeywords = []cpstring{
    "alignas", "alignof", "autobreak", "caseconst", "constexpr", "continue", "default", "doelse", "enum", "extern", "falsefor", "goto", "if", "inline", "nullptr", "register", "restrict", "return", "sizeof", "static", "static_assert", "struct", "switch", "thread_local", "true", "typedef", "typeof", "typeof_unqual", "union", "volatile", "while", "_Alignas", "_Alignof", "_Atomic", "_Bit", "_Bool", "_Complex", "_Decimal128", "_Decimal32", "_Decimal64", "_Generic", "_Imaginary", "_Noreturn", "_Static_assert", "_Thread_local"
}

LANG_C_handle(l []char, buff []char, tokens []Tok, globalPos int, kp int*) {
    k = *kp
    j=0; for j < len(l), j++ {
        found = false
        for k < len(tokens), k++ {
            if tokens[k].pos == (j + globalPos) {
                found = true
                break
            } else if tokens[k].pos > (j + globalPos) {
                break
            }
        }

        if l[j] == '/' && j+1 < len(l) && l[j+1] == '/' {
            appendStr(buff, colors.commColor)
            appendStr(buff, arrAsStr(l[j:]))
            break
        }

        if k > 0 && tokens[k-1].ogCont == "#include" && l[j] == '<' {
            appendStr(buff, colors.strColor)
            for j < len(l), j++ {
                buff[len(buff)] = l[j]
                if l[j] == '>' {
                    break
                }
            }
            continue
        }

        if found == true {
            color = ""
            if tokens[k].type == TOKEN_TYPE_VAR {
                if k+1 < len(tokens) && tokens[k+1].cont == "(" {
                    color = colors.fnColor
                } else if inArrStr(tokens[k].ogCont, cTypes) {
                    color = colors.typeColor
                } else if inArrStr(tokens[k].ogCont, cSpecialVals) {
                    color = colors.constColor
                } else if inArrStr(tokens[k].ogCont, cKeywords) {
                    color = colors.kwColor
                } else {
                    color = colors.varColor
                }
            } else if tokens[k].type == TOKEN_TYPE_BOOL {
                color = colors.constColor
            } else if tokens[k].type == TOKEN_TYPE_STR && tokens[k].line == tokens[k].begLine {
                color = colors.strColor
            } else if tokens[k].type == TOKEN_TYPE_INT || tokens[k].type == TOKEN_TYPE_FLOAT {
                color = colors.numColor
            } else if tokens[k].type == TOKEN_TYPE_CAST {
                color = colors.strColor
            } else if tokens[k].type == TOKEN_TYPE_KEYWORD && tokens[k].ogCont[0] == '#' {
                color = colors.hashColor
            }
            j += strlen(tokens[k].ogCont) - 1
            appendStr(buff, color+tokens[k].ogCont+colors.defaultColor)
            continue
        }

        buff[len(buff)] = l[j]
    }
    *kp = k
}