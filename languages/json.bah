LANG_JSON_handle(l []char, buff []char, tokens []Tok, globalPos int, kp int*) {
    k = *kp
    j=0; for j < len(l), j++ {
        found = false
        for k < len(tokens), k++ {
            if tokens[k].pos == (j + globalPos) {
                found = true
                break
            } else if tokens[k].pos > (j + globalPos) {
                break
            }
        }
        if found == true {
            color = ""
            if tokens[k].type == TOKEN_TYPE_VAR {
                color = rgbColor(255, 0, 0)
            } else if tokens[k].type == TOKEN_TYPE_STR {
                jj=j+strlen(tokens[k].ogCont)
                for jj < len(l), jj++ {
                    if isSpace(l[jj]) == false {
                        break
                    }
                }
                if l[jj] == ':' {
                    color = colors.varColor
                } else {
                    color = colors.strColor
                }
            } else if tokens[k].type == TOKEN_TYPE_INT || tokens[k].type == TOKEN_TYPE_FLOAT {
                color = colors.numColor
            } else if tokens[k].ogCont == "," {
                color = colors.hashColor
            }
            j += strlen(tokens[k].ogCont) - 1
            appendStr(buff, color+tokens[k].ogCont+colors.defaultColor)
            continue
        }

        buff[len(buff)] = l[j]
    }
    *kp = k
}