jsSpecialVals = []cpstring {
    "null", "undefined", "NaN"
}

jsKeywords = []cpstring{
    "abstract", "arguments", "boolean", "break", 
    "byte", "case", "catch", "char", 
    "const", "continue", "debugger", "default", 
    "delete", "do", "double", "else", 
    "eval", "false", "final", "finally", 
    "float", "for", "function", "goto", 
    "if", "implements", "in", "instanceof", 
    "int", "interface", "let", "long", 
    "native", "new", "null", "package", 
    "private", "protected", "public", "return", 
    "short", "static", "switch", "synchronized", 
    "this", "throw", "throws", "transient", 
    "true", "try", "typeof", "var", 
    "void", "volatile", "while", "with", 
    "yield", "class", "enum", "export", "extends", 
    "import", "super", "async"
}

LANG_JS_handle(l []char, buff []char, tokens []Tok, globalPos int, kp int*) {
    k = *kp
    j=0; for j < len(l), j++ {
        found = false
        for k < len(tokens), k++ {
            if tokens[k].pos == (j + globalPos) {
                found = true
                break
            } else if tokens[k].pos > (j + globalPos) {
                break
            }
        }

        if l[j] == '#' {
            appendStr(buff, colors.commColor)
            appendStr(buff, arrAsStr(l[j:]))
            break
        }

        if found == true {
            color = ""
            if tokens[k].type == TOKEN_TYPE_VAR {
                if k+1 < len(tokens) && tokens[k+1].cont == "(" {
                    color = colors.fnColor
                } else if inArrStr(tokens[k].ogCont, jsSpecialVals) {
                    color = colors.constColor
                } else if inArrStr(tokens[k].ogCont, jsKeywords) {
                    color = colors.kwColor
                } else {
                    color = colors.varColor
                }
            } else if tokens[k].type == TOKEN_TYPE_BOOL {
                color = colors.constColor
            } else if tokens[k].type == TOKEN_TYPE_STR && tokens[k].line == tokens[k].begLine {
                color = colors.strColor
            } else if tokens[k].type == TOKEN_TYPE_INT || tokens[k].type == TOKEN_TYPE_FLOAT {
                color = colors.numColor
            } else if tokens[k].type == TOKEN_TYPE_CAST {
                color = colors.typeColor
            }
            j += strlen(tokens[k].ogCont) - 1
            appendStr(buff, color+tokens[k].ogCont+colors.defaultColor)
            continue
        }


        buff[len(buff)] = l[j]
    }
    *kp = k
}