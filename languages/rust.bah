rustTypes = []cpstring{
"i8", "u8", "i16", "u16", "i32", "u32", "i64", "u64", "i128", "u128", "isize", "usize", "f32", "f64", "char", "bool", "T", "str"
}

rustSpecialVals = []cpstring {
    "Null"
}

rustKeywords = []cpstring{
    "as", "break", "const", "continue", "crate", "else", "enum", "extern", "false", "fn", "for", "if", "impl", "in", "let", "loop", "match", "mod", "move", "mut", "pub", "ref", "return", "self", "Self", "static", "struct", "super", "trait", "true", "type", "unsafe", "use", "where", "while", "async", "await", "dyn", "abstract", "become", "box", "do", "final", "macro", "override", "priv", "typeof", "unsized", "virtual", "yield", "try", "union"
}

LANG_RS_handle(l []char, buff []char, tokens []Tok, globalPos int, kp int*) {
    k = *kp
    j=0; for j < len(l), j++ {
        found = false
        for k < len(tokens), k++ {
            if tokens[k].pos == (j + globalPos) {
                found = true
                break
            } else if tokens[k].pos > (j + globalPos) {
                break
            }
        }
        if found == true {
            color = ""
            if tokens[k].type == TOKEN_TYPE_VAR {
                if k+1 < len(tokens) && tokens[k+1].cont == "(" {
                    color = colors.fnColor
                } else if inArrStr(tokens[k].ogCont, rustTypes) {
                    color = colors.typeColor
                } else if inArrStr(tokens[k].ogCont, rustSpecialVals) {
                    color = colors.constColor
                } else if inArrStr(tokens[k].ogCont, rustKeywords) {
                    color = colors.kwColor
                } else {
                    color = colors.varColor
                }
            } else if tokens[k].type == TOKEN_TYPE_BOOL {
                color = colors.constColor
            } else if tokens[k].type == TOKEN_TYPE_STR && tokens[k].line == tokens[k].begLine {
                color = colors.strColor
            } else if tokens[k].type == TOKEN_TYPE_INT || tokens[k].type == TOKEN_TYPE_FLOAT {
                color = colors.numColor
            } else if tokens[k].type == TOKEN_TYPE_CAST {
                color = colors.typeColor
            } else if tokens[k].type == TOKEN_TYPE_KEYWORD && tokens[k].ogCont[0] == '#' {
                color = colors.hashColor
            }
            j += strlen(tokens[k].ogCont) - 1
            appendStr(buff, color+tokens[k].ogCont+colors.defaultColor)
            continue
        }

        if l[j] == '/' && j+1 < len(l) && l[j+1] == '/' {
            appendStr(buff, colors.commColor)
            appendStr(buff, arrAsStr(l[j:]))
            break
        }

        buff[len(buff)] = l[j]
    }
    *kp = k
}